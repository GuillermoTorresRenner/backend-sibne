name: 🚀 Build, Test & Deploy SIBNE Backend

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lebateleur/sibne-backend

jobs:
  test-build-deploy:
    name: 🧪 Test, Build & Deploy
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🐘 Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: 🔧 Generate Prisma Client
        run: npx prisma generate

      - name: 🗄️ Load database backup
        run: |
          # Esperar a que PostgreSQL esté completamente listo
          until pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
            echo "Esperando PostgreSQL..."
            sleep 2
          done

          # Cargar el backup específico directamente con psql
          echo "📂 Cargando backup de la base de datos..."
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql \
            -h localhost \
            -U ${{ secrets.POSTGRES_USER }} \
            -d ${{ secrets.POSTGRES_DB }} \
            -f scripts/db_backups/backup_sibne_hashedPasswords_20251008_162640.sql

          echo "✅ Backup cargado exitosamente"
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      - name: 🧪 Run unit tests
        run: npm run test
        env:
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info

      - name: ⚡ Install Artillery for stress testing
        run: |
          # Instalar Artillery v1.7.9 (última versión con soporte HTML nativo)
          npm install -g artillery@1.7.9

      - name: 🚀 Start application for stress testing
        run: |
          # Iniciar la aplicación en background
          npm run start &
          echo $! > app.pid
          
          # Esperar a que la aplicación esté lista
          echo "Esperando que la aplicación inicie..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/api/test/public > /dev/null; then
              echo "✅ Aplicación iniciada correctamente"
              break
            fi
            sleep 2
          done
        env:
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: test

      - name: 🔥 Run Artillery stress tests
        run: |
          # Crear directorio para reportes
          mkdir -p artillery-reports
          
          # Ejecutar tests de stress y generar reporte HTML
          artillery run \
            --output artillery-reports/artillery-report.json \
            test/artillery/stress-test.yml || echo "Stress tests completed with warnings"
          
          # Generar reporte HTML desde JSON
          artillery report \
            --output artillery-reports/artillery-report.html \
            artillery-reports/artillery-report.json || echo "HTML report generated with warnings"
        continue-on-error: true

      - name: 🛑 Stop application
        if: always()
        run: |
          # Detener la aplicación
          if [ -f app.pid ]; then
            kill $(cat app.pid) || echo "Application already stopped"
            rm app.pid
          fi

      - name: 📈 Upload Artillery reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artillery-stress-test-reports
          path: |
            artillery-reports/
          retention-days: 30

      # Docker Build & Push (solo en push, no en PR)
      - name: 🏗️ Set up Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        if: github.event_name == 'push'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🚀 Build and push Docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Run Trivy vulnerability scanner
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:latest'
          format: 'table'
          output: 'trivy-results.txt'

      - name: 📝 Create deployment summary
        if: github.event_name == 'push'
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## � Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat trivy-results.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
